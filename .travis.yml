language: cpp
compiler: gcc
os: linux
dist: bionic

env: COMPILER=g++-8 ENABLE_MEMCHECK=true

addons:
  apt_packages:
    - cmake
    - libxrandr-dev
    - libudev-dev
    - libopenal-dev
    - libflac-dev
    - libvorbis-dev
    - libgl1-mesa-dev
    - lcov
  apt: {
    packages:
      [
        "g++-8", "valgrind"
      ],
    sources:
      [
        sourceline: "ppa:ubuntu-toolchain-r/test"
      ]
  }

before_install:
    #- sudo apt-get update
    
    #cmake
    #- sudo apt-get install apt-transport-https ca-certificates gnupg software-properties-common wget
    #- wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add -
    #- sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'
    #- sudo apt-get update
    
    #dunno
    #- sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
    #- sudo add-apt-repository universe
    #- sudo apt-get update -qq

install: 
    # C++17
  #- sudo apt-get install -qq g++-6
  #- sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-6 90
    # cppcheck
  - sudo apt-get install -qq cppcheck
  
    #- sudo apt-get install cmake=3.15.3-0kitware1
    #- sudo apt-get install libsfml-dev
    #- sudo apt-cache policy cmake
    #- sudo apt-cache policy libsfml-dev
  - if [[ "${COMPILER}" != "" ]]; then export CXX=${COMPILER}; fi
  - ${CXX} --version

before_script:
    - git clone https://github.com/sfml/sfml && cd sfml && mkdir build && cd build &&
      cmake .. $CMAKE_FLAGS -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../install
    - cmake --build . --target install
    - cd ../..

script: 
  #- g++ main.cpp -std=c++17 -o travis_gcc_cpp17
  #- ./travis_gcc_cpp17
  # cppcheck
  #- cppcheck --quiet --error-exitcode=1 . 
    - cd build
    - cmake -DSFML_DIR=sfml/install/lib/cmake/SFML/ -DCODE_COVERAGE=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DDEMOS=OFF -DTESTS=ON ..
    # -- passes j2 to the build tool
    - cmake --build . --config Debug -- -j2
    - cppcheck --project=compile_commands.json -j2 -q --report-progress
    - ./../bin/Tests/Tests
    - cd ../bin/Tests
    - ls -Rla
    - cp Tests ../../build/
    - cd ..
    - cd ..
    - cd build
    - ls -Rla
    - ./Tests
    
after_success:
    - ls -Rla
    # Create lcov report
    # capture coverage info
    - lcov --capture --directory . --output-file coverage.info
    # filter out system and extra files.
    # To also not include test code in coverage add them with full path to the patterns: '*/tests/*'
    - lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info
    # output coverage data for debugging (optional)
    - lcov --list coverage.info
    # Uploading to CodeCov
    # '-f' specifies file(s) to use and disables manual coverage gathering and file search which has already been done above
    - bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
    - cd ../../
    - ls -Rla
    
after_failure:
    - ls
    - ls -Rla
    # Create lcov report
    # capture coverage info
    - lcov --capture --directory . --output-file coverage.info
    # filter out system and extra files.
    # To also not include test code in coverage add them with full path to the patterns: '*/tests/*'
    - lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info
    # output coverage data for debugging (optional)
    - lcov --list coverage.info
    # Uploading to CodeCov
    # '-f' specifies file(s) to use and disables manual coverage gathering and file search which has already been done above
    - bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
    - cd ../../
    - ls -Rla